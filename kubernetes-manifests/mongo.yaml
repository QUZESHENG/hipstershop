apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  selector:
    app: mongo
  ports:
    - port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
      annotations:
        ad.datadoghq.com/mongo.logs: '[{"source": "mongodb", "service": "mongo"}]'
        ad.datadoghq.com/mongo.check_names: '["mongo"]'
        ad.datadoghq.com/mongo.init_configs: '[{}]'
        ad.datadoghq.com/mongo.instances: |
          [
            {
              "server": "mongodb://datadog:ddpass@%%host%%:27017/admin",
              "additional_metrics":
                [
                  "collection",
                  "metrics.commands",
                  "tcmalloc",
                  "top"
                ]
            }
          ]
    spec:
      containers:
        - name: mongo
          image: mongo
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: storage
              mountPath: /data/db
          lifecycle:
            postStart:
              exec:
                command:
                - sh
                - -c
                # sleep is for Azure
                - "sleep 30; mongo --eval 'db = db.getSiblingDB(\"admin\"); db.dropUser(\"datadog\"); db.createUser({ \"user\": \"datadog\", \"pwd\": \"ddpass\", \"roles\": [{role: \"read\", db: \"admin\"},{role: \"clusterMonitor\", db: \"admin\"},{role: \"read\", db: \"local\"}, {role: \"read\", db: \"store\"}]});'"
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              # @ckelner: might have to do this as a hack for Azure... maybe not
              # see above lifecycle comment
              - "mongo --eval 'rs.status()'"
            initialDelaySeconds: 10
            failureThreshold: 3
            successThreshold: 1
            timeoutSeconds: 2
            periodSeconds: 3
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - "mongo --eval 'rs.status()'"
            initialDelaySeconds: 60
            failureThreshold: 3
            successThreshold: 1
            timeoutSeconds: 2
            periodSeconds: 10
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: mongo-pvc